[
  {
    "id": "TC001",
    "title": "user registration with valid data",
    "description": "Test the /api/auth/register endpoint to ensure a new user can be successfully registered with valid email, password, name, and userType. Verify the response status is 201 and the user is created in the system."
  },
  {
    "id": "TC002",
    "title": "user registration with duplicate email",
    "description": "Test the /api/auth/register endpoint to verify that attempting to register a user with an email that already exists returns a 409 conflict error."
  },
  {
    "id": "TC003",
    "title": "user login with valid credentials",
    "description": "Test the /api/auth/login endpoint to ensure a user can log in successfully with correct email and password. Verify the response status is 200 and a valid JWT token is returned."
  },
  {
    "id": "TC004",
    "title": "user login with invalid credentials",
    "description": "Test the /api/auth/login endpoint to verify that login attempts with incorrect email or password return a 401 unauthorized error."
  },
  {
    "id": "TC005",
    "title": "create order with valid data",
    "description": "Test the POST /api/orders endpoint to create a new order with valid restaurantId and items. Verify the response status is 201 and the order is stored correctly."
  },
  {
    "id": "TC006",
    "title": "list orders with filters",
    "description": "Test the GET /api/orders endpoint with query parameters such as restaurantId and status to retrieve filtered lists of orders. Verify the response status is 200 and the returned orders match the filters."
  },
  {
    "id": "TC007",
    "title": "update order status successfully",
    "description": "Test the PATCH /api/orders/{id}/status endpoint to update the status of an existing order. Verify the response status is 200 and the order status is updated accordingly."
  },
  {
    "id": "TC008",
    "title": "update order status for non existing order",
    "description": "Test the PATCH /api/orders/{id}/status endpoint with an invalid order id to verify that the response returns a 404 not found error."
  },
  {
    "id": "TC009",
    "title": "create menu item with valid data",
    "description": "Test the POST /api/menu endpoint to create a new menu item with required fields such as name and price. Verify the response status is 201 and the item is added to the menu."
  },
  {
    "id": "TC010",
    "title": "list notifications with unread filter",
    "description": "Test the GET /api/notifications endpoint with the unreadOnly query parameter to retrieve only unread notifications for the user. Verify the response status is 200 and the notifications returned are unread."
  }
]
