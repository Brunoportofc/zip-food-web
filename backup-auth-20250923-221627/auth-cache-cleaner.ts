// src/utils/auth-cache-cleaner.ts
/**
 * Utilit√°rio para limpeza de cache de autentica√ß√£o no navegador
 * Resolve problemas de "email j√° em uso" causados por cache persistente
 */

export class AuthCacheCleaner {
  /**
   * Limpa todos os dados relacionados √† autentica√ß√£o do localStorage
   */
  static clearLocalStorage(): void {
    try {
      // Limpar dados espec√≠ficos do Firebase
      const firebaseKeys = [
        'firebase:authUser',
        'firebase:host',
        'firebase:persistence',
        'firebase:previous_websocket_failure'
      ];

      firebaseKeys.forEach(key => {
        Object.keys(localStorage).forEach(storageKey => {
          if (storageKey.includes(key) || storageKey.includes('firebase')) {
            localStorage.removeItem(storageKey);
          }
        });
      });

      // Limpar dados espec√≠ficos da aplica√ß√£o
      const appKeys = [
        'auth-store',
        'user-data',
        'auth-token',
        'user-profile',
        'auth-state'
      ];

      appKeys.forEach(key => {
        localStorage.removeItem(key);
      });

      console.log('‚úÖ localStorage limpo com sucesso');
    } catch (error) {
      console.warn('‚ö†Ô∏è Erro ao limpar localStorage:', error);
    }
  }

  /**
   * Limpa todos os dados relacionados √† autentica√ß√£o do sessionStorage
   */
  static clearSessionStorage(): void {
    try {
      // Limpar dados espec√≠ficos do Firebase
      const firebaseKeys = [
        'firebase:authUser',
        'firebase:host',
        'firebase:persistence'
      ];

      firebaseKeys.forEach(key => {
        Object.keys(sessionStorage).forEach(storageKey => {
          if (storageKey.includes(key) || storageKey.includes('firebase')) {
            sessionStorage.removeItem(storageKey);
          }
        });
      });

      // Limpar dados espec√≠ficos da aplica√ß√£o
      const appKeys = [
        'auth-store',
        'user-data',
        'auth-token',
        'user-profile',
        'auth-state'
      ];

      appKeys.forEach(key => {
        sessionStorage.removeItem(key);
      });

      console.log('‚úÖ sessionStorage limpo com sucesso');
    } catch (error) {
      console.warn('‚ö†Ô∏è Erro ao limpar sessionStorage:', error);
    }
  }

  /**
   * Limpa cookies relacionados √† autentica√ß√£o
   */
  static clearAuthCookies(): void {
    try {
      // Lista de cookies relacionados ao Firebase e autentica√ß√£o
      const cookiesToClear = [
        '__session',
        'firebase-heartbeat-database',
        'firebase-heartbeat-store',
        'auth-token',
        'user-session'
      ];

      cookiesToClear.forEach(cookieName => {
        // Limpar cookie para o dom√≠nio atual
        document.cookie = `${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;`;
        
        // Limpar cookie para subdom√≠nios
        document.cookie = `${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/; domain=.${window.location.hostname};`;
      });

      console.log('‚úÖ Cookies de autentica√ß√£o limpos com sucesso');
    } catch (error) {
      console.warn('‚ö†Ô∏è Erro ao limpar cookies:', error);
    }
  }

  /**
   * Limpa o cache do IndexedDB relacionado ao Firebase
   */
  static async clearIndexedDB(): Promise<void> {
    try {
      if ('indexedDB' in window) {
        // Tentar limpar databases do Firebase
        const firebaseDBNames = [
          'firebase-heartbeat-database',
          'firebase-installations-database',
          'fcm_token_details_db'
        ];

        for (const dbName of firebaseDBNames) {
          try {
            const deleteReq = indexedDB.deleteDatabase(dbName);
            await new Promise((resolve, reject) => {
              deleteReq.onsuccess = () => resolve(true);
              deleteReq.onerror = () => reject(deleteReq.error);
              deleteReq.onblocked = () => {
                console.warn(`Database ${dbName} est√° bloqueado`);
                resolve(true);
              };
            });
          } catch (error) {
            console.warn(`Erro ao limpar database ${dbName}:`, error);
          }
        }

        console.log('‚úÖ IndexedDB limpo com sucesso');
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è Erro ao limpar IndexedDB:', error);
    }
  }

  /**
   * Executa uma limpeza completa de todos os caches de autentica√ß√£o
   */
  static async clearAllAuthCache(): Promise<void> {
    console.log('üßπ Iniciando limpeza completa do cache de autentica√ß√£o...');
    
    // Limpar localStorage
    this.clearLocalStorage();
    
    // Limpar sessionStorage
    this.clearSessionStorage();
    
    // Limpar cookies
    this.clearAuthCookies();
    
    // Limpar IndexedDB
    await this.clearIndexedDB();
    
    console.log('‚úÖ Limpeza completa do cache conclu√≠da!');
    console.log('üí° Recomenda√ß√£o: Recarregue a p√°gina para garantir que todas as mudan√ßas tenham efeito.');
  }

  /**
   * Mostra instru√ß√µes para o usu√°rio sobre como limpar o cache manualmente
   */
  static showClearCacheInstructions(): void {
    const instructions = `
üßπ INSTRU√á√ïES PARA LIMPAR CACHE MANUALMENTE:

1. üåê Chrome/Edge:
   - Pressione Ctrl+Shift+Delete
   - Selecione "Cookies e outros dados do site"
   - Selecione "Imagens e arquivos armazenados em cache"
   - Clique em "Limpar dados"

2. ü¶ä Firefox:
   - Pressione Ctrl+Shift+Delete
   - Selecione "Cookies" e "Cache"
   - Clique em "Limpar agora"

3. üîß Ferramentas de Desenvolvedor:
   - Pressione F12
   - V√° para Application/Storage
   - Limpe localStorage, sessionStorage e cookies
   - Ou clique com bot√£o direito no √≠cone de recarregar e selecione "Esvaziar cache e recarregar"

4. üïµÔ∏è Modo Inc√≥gnito:
   - Teste em uma janela inc√≥gnita/privada
   - Isso ignora todo o cache existente
    `;

    console.log(instructions);
    
    // Se estiver em desenvolvimento, mostrar um alert tamb√©m
    if (process.env.NODE_ENV === 'development') {
      alert('Verifique o console para instru√ß√µes de limpeza de cache');
    }
  }
}

// Fun√ß√£o de conveni√™ncia para uso r√°pido
export const clearAuthCache = () => AuthCacheCleaner.clearAllAuthCache();

// Fun√ß√£o para mostrar instru√ß√µes
export const showCacheInstructions = () => AuthCacheCleaner.showClearCacheInstructions();