// src/app/api/auth/verify/route.ts
// API route para verifica√ß√£o de autentica√ß√£o e papel do usu√°rio

import { NextRequest, NextResponse } from 'next/server';
import { adminAuth, adminDb } from '@/lib/firebase/admin';

export async function POST(request: NextRequest) {
  // [FASE 4 - LOG 1] Requisi√ß√£o recebida na API de verifica√ß√£o
  console.log('[API_VERIFY] üöÄ Requisi√ß√£o de verifica√ß√£o recebida', {
    method: request.method,
    url: request.url,
    timestamp: new Date().toISOString()
  });

  try {
    // ‚ú® CORRE√á√ÉO: Verificar se o Firebase Admin est√° dispon√≠vel
    if (!adminAuth || !adminDb) {
      console.warn('‚ö†Ô∏è [API_VERIFY] Firebase Admin n√£o dispon√≠vel');
      return NextResponse.json({
        success: false,
        error: 'Firebase Admin n√£o configurado',
        fallback: true
      }, { status: 503 });
    }
    const { sessionCookie } = await request.json();
    
    // [FASE 4 - LOG 2] Dados recebidos
    console.log('[API_VERIFY] üìã Dados recebidos:', {
      hasSessionCookie: !!sessionCookie,
      cookieLength: sessionCookie?.length || 0,
      cookiePreview: sessionCookie ? sessionCookie.substring(0, 20) + '...' : 'N/A',
      timestamp: new Date().toISOString()
    });
    
    if (!sessionCookie) {
      // [FASE 4 - LOG 3] Token n√£o fornecido
      console.error('[API_VERIFY] ‚ùå Token de sess√£o n√£o fornecido', {
        timestamp: new Date().toISOString()
      });
      return NextResponse.json(
        { error: 'Token de sess√£o n√£o fornecido' },
        { status: 401 }
      );
    }

    // [FASE 4 - LOG 4] Verificando token de sess√£o
    console.log('[API_VERIFY] üîç Verificando token de sess√£o com Firebase Admin...', {
      timestamp: new Date().toISOString()
    });

    // Verificar token de sess√£o
    const decodedClaims = await adminAuth.verifySessionCookie(sessionCookie);
    const uid = decodedClaims.uid;

    // [FASE 4 - LOG 5] Token verificado com sucesso - incluindo custom claims
    console.log('[API_VERIFY] ‚úÖ Token verificado com sucesso:', {
      uid,
      iss: decodedClaims.iss,
      aud: decodedClaims.aud,
      exp: new Date(decodedClaims.exp * 1000).toISOString(),
      customClaims: {
        hasRestaurant: decodedClaims.hasRestaurant || false,
        restaurantId: decodedClaims.restaurantId || null
      },
      timestamp: new Date().toISOString()
    });

    // [FASE 4 - LOG 6] Buscando dados do usu√°rio no Firestore
    console.log('[API_VERIFY] üîç Buscando dados do usu√°rio no Firestore...', {
      uid,
      timestamp: new Date().toISOString()
    });

    // Buscar papel do usu√°rio no Firestore
    const userDoc = await adminDb.collection('users').doc(uid).get();
    
    if (!userDoc.exists) {
      // [FASE 4 - LOG 7] Usu√°rio n√£o encontrado
      console.error('[API_VERIFY] ‚ùå Usu√°rio n√£o encontrado no Firestore:', {
        uid,
        timestamp: new Date().toISOString()
      });
      return NextResponse.json(
        { error: 'Usu√°rio n√£o encontrado' },
        { status: 404 }
      );
    }

    const userData = userDoc.data();
    const userRole = userData?.role;

    // [FASE 4 - LOG 8] Dados do usu√°rio obtidos
    console.log('[API_VERIFY] üìã Dados do usu√°rio obtidos do Firestore:', {
      uid,
      role: userRole,
      user_type: userData?.user_type,
      displayName: userData?.displayName,
      email: userData?.email,
      hasAllRequiredFields: !!(userData?.role && userData?.email),
      timestamp: new Date().toISOString()
    });

    if (!userRole || !['customer', 'restaurant', 'delivery'].includes(userRole)) {
      // [FASE 4 - LOG 9] Papel de usu√°rio inv√°lido
      console.error('[API_VERIFY] ‚ùå Papel de usu√°rio inv√°lido:', {
        uid,
        role: userRole,
        validRoles: ['customer', 'restaurant', 'delivery'],
        timestamp: new Date().toISOString()
      });
      return NextResponse.json(
        { error: 'Papel de usu√°rio inv√°lido' },
        { status: 403 }
      );
    }

    // [FASE 4 - LOG 10] Verifica√ß√£o bem-sucedida
    console.log('[API_VERIFY] ‚úÖ VERIFICA√á√ÉO BEM-SUCEDIDA! Retornando dados:', {
      uid,
      role: userRole,
      success: true,
      timestamp: new Date().toISOString()
    });

    return NextResponse.json({
      success: true,
      uid,
      role: userRole,
      userData,
      customClaims: {
        hasRestaurant: decodedClaims.hasRestaurant || false,
        restaurantId: decodedClaims.restaurantId || null
      }
    });

  } catch (error) {
    // [FASE 4 - LOG 11] Erro durante verifica√ß√£o
    console.error('[API_VERIFY] üí• ERRO durante verifica√ß√£o:', {
      error: error instanceof Error ? error.message : String(error),
      stack: error instanceof Error ? error.stack : undefined,
      timestamp: new Date().toISOString()
    });
    return NextResponse.json(
      { error: 'Token inv√°lido ou expirado' },
      { status: 401 }
    );
  }
}
