// src/utils/cleanup-orphan-accounts.ts
// Utilit√°rio para limpar contas √≥rf√£s do Firebase Authentication

import { auth, db } from '@/lib/firebase/config';
import { signInWithEmailAndPassword, deleteUser, signOut } from 'firebase/auth';
import { doc, getDoc } from 'firebase/firestore';

export interface CleanupResult {
  success: boolean;
  message: string;
  accountDeleted?: boolean;
}

/**
 * Tenta limpar uma conta √≥rf√£ (existe no Auth mas n√£o no Firestore)
 */
export async function cleanupOrphanAccount(email: string, password: string): Promise<CleanupResult> {
  try {
    console.log('üßπ Tentando limpar conta √≥rf√£:', email);

    // Salvar o usu√°rio atual (se houver)
    const currentUser = auth.currentUser;

    // Tentar fazer login com as credenciais da conta √≥rf√£
    const userCredential = await signInWithEmailAndPassword(auth, email, password);
    const user = userCredential.user;
    
    console.log('‚úÖ Login realizado para verifica√ß√£o:', user.uid);

    try {
      // Verificar se os dados existem no Firestore
      const userDoc = await getDoc(doc(db, 'users', user.uid));
      
      if (!userDoc.exists()) {
        console.log('‚ö†Ô∏è Conta √≥rf√£ detectada. Removendo...');
        
        // Deletar a conta √≥rf√£
        await deleteUser(user);
        console.log('üóëÔ∏è Conta √≥rf√£ removida com sucesso');
        
        // Fazer logout para limpar o estado
        await signOut(auth);
        
        return {
          success: true,
          message: 'Conta √≥rf√£ removida. Agora voc√™ pode criar uma nova conta com este email.',
          accountDeleted: true
        };
      } else {
        console.log('‚úÖ Conta v√°lida encontrada no Firestore');
        
        // Fazer logout da conta verificada
        await signOut(auth);
        
        return {
          success: true,
          message: 'Esta conta j√° existe e est√° v√°lida. Use o login normal.',
          accountDeleted: false
        };
      }
    } catch (firestoreError: any) {
      console.error('‚ùå Erro ao verificar Firestore:', firestoreError);
      
      // Se der erro de permiss√£o no Firestore, assumir que √© conta √≥rf√£
      if (firestoreError.code === 'permission-denied' || 
          firestoreError.message?.includes('Missing or insufficient permissions')) {
        
        console.log('‚ö†Ô∏è Erro de permiss√£o detectado - assumindo conta √≥rf√£. Removendo...');
        
        try {
          await deleteUser(user);
          console.log('üóëÔ∏è Conta √≥rf√£ removida com sucesso');
          
          // Fazer logout para limpar o estado
          await signOut(auth);
          
          return {
            success: true,
            message: 'Conta √≥rf√£ removida. Agora voc√™ pode criar uma nova conta com este email.',
            accountDeleted: true
          };
        } catch (deleteError: any) {
          console.error('‚ùå Erro ao deletar conta √≥rf√£:', deleteError);
          await signOut(auth);
          return {
            success: false,
            message: 'Erro ao remover conta √≥rf√£. Tente novamente.'
          };
        }
      }
      
      // Fazer logout em caso de erro
      await signOut(auth);
      throw firestoreError;
    }

  } catch (error: any) {
    console.error('‚ùå Erro ao limpar conta √≥rf√£:', error);
    
    if (error.code === 'auth/user-not-found') {
      return {
        success: true,
        message: 'Email n√£o encontrado. Voc√™ pode criar uma nova conta.',
        accountDeleted: false
      };
    }
    
    if (error.code === 'auth/wrong-password') {
      return {
        success: false,
        message: 'Senha incorreta. N√£o foi poss√≠vel verificar a conta.'
      };
    }
    
    if (error.code === 'auth/invalid-email') {
      return {
        success: false,
        message: 'Email inv√°lido.'
      };
    }

    if (error.code === 'auth/too-many-requests') {
      return {
        success: false,
        message: 'Muitas tentativas. Aguarde alguns minutos e tente novamente.'
      };
    }

    return {
      success: false,
      message: `Erro ao verificar conta: ${error.message}`
    };
  }
}

/**
 * Verifica se uma conta √© √≥rf√£ sem fazer login
 */
export async function checkIfOrphanAccount(email: string): Promise<boolean> {
  try {
    // Esta fun√ß√£o seria mais complexa de implementar sem fazer login
    // Por enquanto, retornamos false para n√£o assumir que √© √≥rf√£
    return false;
  } catch (error) {
    console.error('Erro ao verificar conta √≥rf√£:', error);
    return false;
  }
}
