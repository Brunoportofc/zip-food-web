require('dotenv').config({ path: '.env.local' });
const { createClient } = require('@supabase/supabase-js');

const supabaseAdmin = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

const supabaseClient = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
);

async function testCompleteFlow() {
  try {
    console.log('üß™ TESTE COMPLETO DO FLUXO DE CRIA√á√ÉO DE CONTA');
    console.log('=' .repeat(60));
    
    const testUsers = [
      {
        email: `test-customer-${Date.now()}@zipfood.com`,
        password: 'teste123456',
        name: 'Cliente Teste',
        userType: 'customer',
        phone: '(16) 99999-1111'
      },
      {
        email: `test-restaurant-${Date.now()}@zipfood.com`,
        password: 'teste123456',
        name: 'Restaurante Teste',
        userType: 'restaurant',
        phone: '(16) 99999-2222'
      },
      {
        email: `test-driver-${Date.now()}@zipfood.com`,
        password: 'teste123456',
        name: 'Entregador Teste',
        userType: 'delivery_driver',
        phone: '(16) 99999-3333'
      }
    ];
    
    const createdUsers = [];
    
    for (const userData of testUsers) {
      console.log(`\nüë§ TESTANDO CRIA√á√ÉO DE ${userData.userType.toUpperCase()}: ${userData.email}`);
      console.log('-' .repeat(50));
      
      try {
        // 1. Criar usu√°rio usando o cliente p√∫blico (simula o frontend)
        console.log('1Ô∏è‚É£ Criando usu√°rio via Supabase Auth...');
        
        const { data: authData, error: authError } = await supabaseClient.auth.signUp({
          email: userData.email,
          password: userData.password,
          options: {
            data: {
              name: userData.name,
              user_type: userData.userType,
              phone: userData.phone,
            },
          },
        });
        
        if (authError) {
          console.log(`‚ùå Erro na cria√ß√£o: ${authError.message}`);
          continue;
        }
        
        if (!authData.user) {
          console.log('‚ùå Nenhum usu√°rio retornado');
          continue;
        }
        
        console.log(`‚úÖ Usu√°rio criado em auth.users: ${authData.user.id}`);
        createdUsers.push(authData.user);
        
        // 2. Simular a sincroniza√ß√£o manual (j√° que n√£o temos trigger)
        console.log('2Ô∏è‚É£ Sincronizando com tabela public.users...');
        
        const publicUserData = {
          id: authData.user.id,
          email: authData.user.email,
          user_type: userData.userType,
          name: userData.name,
          phone: userData.phone,
          password_hash: '$2b$10$synced.from.auth.users',
          created_at: authData.user.created_at,
          updated_at: authData.user.updated_at || authData.user.created_at
        };
        
        const { error: syncError } = await supabaseAdmin
          .from('users')
          .insert(publicUserData);
        
        if (syncError) {
          console.log(`‚ùå Erro na sincroniza√ß√£o: ${syncError.message}`);
        } else {
          console.log('‚úÖ Usu√°rio sincronizado com public.users');
        }
        
        // 3. Criar entradas espec√≠ficas por tipo de usu√°rio
        if (userData.userType === 'restaurant') {
          console.log('3Ô∏è‚É£ Criando entrada na tabela restaurants...');
          
          const restaurantData = {
            user_id: authData.user.id,
            name: userData.name,
            description: 'Restaurante de teste',
            address: 'Endere√ßo de teste, 123',
            phone: userData.phone,
            email: authData.user.email,
            created_by: authData.user.id,
            created_at: authData.user.created_at,
            updated_at: authData.user.updated_at || authData.user.created_at
          };
          
          const { error: restError } = await supabaseAdmin
            .from('restaurants')
            .insert(restaurantData);
          
          if (restError) {
            console.log(`‚ùå Erro ao criar restaurante: ${restError.message}`);
          } else {
            console.log('‚úÖ Restaurante criado');
          }
        }
        
        if (userData.userType === 'delivery_driver') {
          console.log('3Ô∏è‚É£ Criando entrada na tabela delivery_drivers...');
          
          const driverData = {
            user_id: authData.user.id,
            name: userData.name,
            phone: userData.phone,
            email: authData.user.email,
            vehicle_type: 'moto',
            license_plate: 'ABC-1234',
            created_at: authData.user.created_at,
            updated_at: authData.user.updated_at || authData.user.created_at
          };
          
          const { error: driverError } = await supabaseAdmin
            .from('delivery_drivers')
            .insert(driverData);
          
          if (driverError) {
            console.log(`‚ùå Erro ao criar entregador: ${driverError.message}`);
          } else {
            console.log('‚úÖ Entregador criado');
          }
        }
        
        // 4. Verificar se o usu√°rio pode fazer login
        console.log('4Ô∏è‚É£ Testando login...');
        
        const { data: loginData, error: loginError } = await supabaseClient.auth.signInWithPassword({
          email: userData.email,
          password: userData.password,
        });
        
        if (loginError) {
          console.log(`‚ùå Erro no login: ${loginError.message}`);
        } else {
          console.log('‚úÖ Login bem-sucedido');
          
          // Fazer logout
          await supabaseClient.auth.signOut();
        }
        
        // 5. Verificar dados na tabela public.users
        console.log('5Ô∏è‚É£ Verificando dados em public.users...');
        
        const { data: publicUser, error: publicError } = await supabaseAdmin
          .from('users')
          .select('*')
          .eq('id', authData.user.id)
          .single();
        
        if (publicError) {
          console.log(`‚ùå Usu√°rio n√£o encontrado em public.users: ${publicError.message}`);
        } else {
          console.log(`‚úÖ Usu√°rio encontrado: ${publicUser.name} (${publicUser.user_type})`);
        }
        
        console.log('üéâ TESTE CONCLU√çDO COM SUCESSO!');
        
      } catch (userError) {
        console.log(`‚ùå Erro inesperado: ${userError.message}`);
      }
    }
    
    // 6. Relat√≥rio final
    console.log('\nüìä RELAT√ìRIO FINAL');
    console.log('=' .repeat(30));
    
    const { data: finalAuthUsers } = await supabaseAdmin.auth.admin.listUsers();
    const { data: finalPublicUsers } = await supabaseAdmin
      .from('users')
      .select('id');
    
    console.log(`üìã Total em auth.users: ${finalAuthUsers?.users?.length || 0}`);
    console.log(`üìã Total em public.users: ${finalPublicUsers?.length || 0}`);
    
    if (finalAuthUsers?.users?.length === finalPublicUsers?.length) {
      console.log('‚úÖ Tabelas sincronizadas!');
    } else {
      console.log('‚ö†Ô∏è  Ainda h√° discrep√¢ncia entre as tabelas');
    }
    
    // 7. Limpeza (remover usu√°rios de teste)
    console.log('\nüßπ LIMPANDO USU√ÅRIOS DE TESTE...');
    
    for (const user of createdUsers) {
      try {
        // Remover de auth.users
        await supabaseAdmin.auth.admin.deleteUser(user.id);
        
        // Remover de public.users
        await supabaseAdmin
          .from('users')
          .delete()
          .eq('id', user.id);
        
        // Remover de tabelas relacionadas
        await supabaseAdmin
          .from('restaurants')
          .delete()
          .eq('user_id', user.id);
        
        await supabaseAdmin
          .from('delivery_drivers')
          .delete()
          .eq('user_id', user.id);
        
        console.log(`‚úÖ Usu√°rio ${user.email} removido`);
      } catch (cleanupError) {
        console.log(`‚ö†Ô∏è  Erro ao remover ${user.email}: ${cleanupError.message}`);
      }
    }
    
    console.log('\nüéØ TESTE COMPLETO FINALIZADO!');
    
  } catch (error) {
    console.error('‚ùå Erro geral no teste:', error.message);
  }
}

testCompleteFlow();