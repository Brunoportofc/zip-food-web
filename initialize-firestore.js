// Script para inicializar cole√ß√µes b√°sicas do Firestore
// Este script cria as cole√ß√µes necess√°rias e testa o fluxo de cadastro

const admin = require('firebase-admin');
const path = require('path');

// Inicializar Firebase Admin
const serviceAccount = require('./zip-food-delivery-f5b4f-firebase-adminsdk-fbsvc-5d1ee4728d.json');

admin.initializeApp({
  credential: admin.credential.cert(serviceAccount),
  projectId: 'zip-food-delivery-f5b4f'
});

const db = admin.firestore();
const auth = admin.auth();

async function initializeFirestore() {
  console.log('üöÄ Iniciando inicializa√ß√£o do Firestore...');
  
  try {
    // 1. Verificar cole√ß√µes existentes
    console.log('\nüìã Verificando cole√ß√µes existentes...');
    const collections = await db.listCollections();
    console.log('Cole√ß√µes encontradas:', collections.map(col => col.id));
    
    // 2. Criar documentos de exemplo para inicializar cole√ß√µes
    console.log('\nüèóÔ∏è Inicializando cole√ß√µes b√°sicas...');
    
    // Inicializar cole√ß√£o users
    const usersRef = db.collection('users');
    const usersSnapshot = await usersRef.limit(1).get();
    
    if (usersSnapshot.empty) {
      console.log('Criando cole√ß√£o users...');
      await usersRef.doc('_init').set({
        _placeholder: true,
        created_at: admin.firestore.FieldValue.serverTimestamp(),
        description: 'Documento placeholder para inicializar a cole√ß√£o'
      });
      console.log('‚úÖ Cole√ß√£o users inicializada');
    } else {
      console.log('‚úÖ Cole√ß√£o users j√° existe');
    }
    
    // Inicializar cole√ß√£o customers
    const customersRef = db.collection('customers');
    const customersSnapshot = await customersRef.limit(1).get();
    
    if (customersSnapshot.empty) {
      console.log('Criando cole√ß√£o customers...');
      await customersRef.doc('_init').set({
        _placeholder: true,
        created_at: admin.firestore.FieldValue.serverTimestamp(),
        description: 'Documento placeholder para inicializar a cole√ß√£o'
      });
      console.log('‚úÖ Cole√ß√£o customers inicializada');
    } else {
      console.log('‚úÖ Cole√ß√£o customers j√° existe');
    }
    
    // Inicializar cole√ß√£o restaurants
    const restaurantsRef = db.collection('restaurants');
    const restaurantsSnapshot = await restaurantsRef.limit(1).get();
    
    if (restaurantsSnapshot.empty) {
      console.log('Criando cole√ß√£o restaurants...');
      await restaurantsRef.doc('_init').set({
        _placeholder: true,
        created_at: admin.firestore.FieldValue.serverTimestamp(),
        description: 'Documento placeholder para inicializar a cole√ß√£o'
      });
      console.log('‚úÖ Cole√ß√£o restaurants inicializada');
    } else {
      console.log('‚úÖ Cole√ß√£o restaurants j√° existe');
    }
    
    // Inicializar cole√ß√£o delivery_drivers
    const deliveryRef = db.collection('delivery_drivers');
    const deliverySnapshot = await deliveryRef.limit(1).get();
    
    if (deliverySnapshot.empty) {
      console.log('Criando cole√ß√£o delivery_drivers...');
      await deliveryRef.doc('_init').set({
        _placeholder: true,
        created_at: admin.firestore.FieldValue.serverTimestamp(),
        description: 'Documento placeholder para inicializar a cole√ß√£o'
      });
      console.log('‚úÖ Cole√ß√£o delivery_drivers inicializada');
    } else {
      console.log('‚úÖ Cole√ß√£o delivery_drivers j√° existe');
    }
    
    // 3. Testar cria√ß√£o de usu√°rio
    console.log('\nüß™ Testando cria√ß√£o de usu√°rio...');
    
    const testEmail = 'teste-firestore@example.com';
    const testPassword = 'teste123456';
    
    try {
      // Verificar se usu√°rio j√° existe
      try {
        const existingUser = await auth.getUserByEmail(testEmail);
        console.log('Usu√°rio de teste j√° existe, removendo...');
        await auth.deleteUser(existingUser.uid);
      } catch (error) {
        // Usu√°rio n√£o existe, tudo bem
      }
      
      // Criar usu√°rio no Firebase Auth
      console.log('Criando usu√°rio no Firebase Auth...');
      const userRecord = await auth.createUser({
        email: testEmail,
        password: testPassword,
        displayName: 'Usu√°rio Teste'
      });
      
      console.log('‚úÖ Usu√°rio criado no Firebase Auth:', userRecord.uid);
      
      // Criar perfil no Firestore
      console.log('Criando perfil no Firestore...');
      const userProfile = {
        id: userRecord.uid,
        email: testEmail,
        name: 'Usu√°rio Teste',
        user_type: 'customer',
        phone: '(11) 99999-9999',
        status: 'active',
        created_at: admin.firestore.FieldValue.serverTimestamp(),
        updated_at: admin.firestore.FieldValue.serverTimestamp(),
        last_login: admin.firestore.FieldValue.serverTimestamp()
      };
      
      // Salvar na cole√ß√£o users
      await db.collection('users').doc(userRecord.uid).set(userProfile);
      console.log('‚úÖ Perfil salvo na cole√ß√£o users');
      
      // Salvar na cole√ß√£o customers
      await db.collection('customers').doc(userRecord.uid).set({
        ...userProfile,
        user_id: userRecord.uid
      });
      console.log('‚úÖ Perfil salvo na cole√ß√£o customers');
      
      // Verificar se os dados foram salvos corretamente
      console.log('\nüîç Verificando dados salvos...');
      const savedUser = await db.collection('users').doc(userRecord.uid).get();
      const savedCustomer = await db.collection('customers').doc(userRecord.uid).get();
      
      if (savedUser.exists && savedCustomer.exists) {
        console.log('‚úÖ Dados verificados com sucesso!');
        console.log('Dados do usu√°rio:', savedUser.data());
      } else {
        console.log('‚ùå Erro: Dados n√£o foram salvos corretamente');
      }
      
      // Limpar dados de teste
      console.log('\nüßπ Limpando dados de teste...');
      await auth.deleteUser(userRecord.uid);
      await db.collection('users').doc(userRecord.uid).delete();
      await db.collection('customers').doc(userRecord.uid).delete();
      console.log('‚úÖ Dados de teste removidos');
      
    } catch (error) {
      console.error('‚ùå Erro no teste de cria√ß√£o de usu√°rio:', error);
    }
    
    // 4. Verificar regras do Firestore
    console.log('\nüìú Verificando regras do Firestore...');
    console.log('As regras est√£o configuradas para permitir:');
    console.log('- Cria√ß√£o de usu√°rios autenticados em suas pr√≥prias cole√ß√µes');
    console.log('- Leitura p√∫blica de restaurantes');
    console.log('- Opera√ß√µes baseadas em propriedade de documentos');
    
    // 5. Remover documentos placeholder
    console.log('\nüßπ Removendo documentos placeholder...');
    try {
      await db.collection('users').doc('_init').delete();
      await db.collection('customers').doc('_init').delete();
      await db.collection('restaurants').doc('_init').delete();
      await db.collection('delivery_drivers').doc('_init').delete();
      console.log('‚úÖ Documentos placeholder removidos');
    } catch (error) {
      console.log('‚ÑπÔ∏è Alguns documentos placeholder podem n√£o existir');
    }
    
    console.log('\nüéâ Inicializa√ß√£o do Firestore conclu√≠da com sucesso!');
    console.log('\nüìù Pr√≥ximos passos:');
    console.log('1. Teste o cadastro de usu√°rio na aplica√ß√£o');
    console.log('2. Verifique se os dados est√£o sendo salvos corretamente');
    console.log('3. Se ainda houver problemas, verifique o console do navegador');
    
  } catch (error) {
    console.error('‚ùå Erro durante a inicializa√ß√£o:', error);
  }
}

// Executar inicializa√ß√£o
initializeFirestore()
  .then(() => {
    console.log('\n‚úÖ Script executado com sucesso');
    process.exit(0);
  })
  .catch((error) => {
    console.error('\n‚ùå Erro na execu√ß√£o do script:', error);
    process.exit(1);
  });